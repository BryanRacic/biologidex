# Production Docker Compose Configuration
# Usage: docker-compose -f docker-compose.production.yml up -d

version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_DB: ${DB_NAME:-biologidex}
      POSTGRES_USER: ${DB_USER:-biologidex}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-biologidex}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - biologidex-network
    ports:
      - "127.0.0.1:5432:5432"  # Only expose to localhost

  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --requirepass "${REDIS_PASSWORD:-defaultpass123}" --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a \"${REDIS_PASSWORD:-defaultpass123}\" --raw incr ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - biologidex-network
    ports:
      - "127.0.0.1:6379:6379"  # Only expose to localhost

  web:
    build:
      context: .
      dockerfile: Dockerfile.production
    restart: always
    command: gunicorn biologidex.wsgi:application --config gunicorn.conf.py
    volumes:
      - static_files:/app/static
      - media_files:/app/media
      - ./logs:/app/logs
    environment:
      DJANGO_SETTINGS_MODULE: biologidex.settings.production_local
      PYTHONUNBUFFERED: "1"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - biologidex-network
    ports:
      - "127.0.0.1:8000:8000"  # Only expose to localhost
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    restart: always
    command: celery -A biologidex worker -l info --concurrency=${CELERY_WORKERS:-4}
    volumes:
      - media_files:/app/media
      - ./logs:/app/logs
    environment:
      DJANGO_SETTINGS_MODULE: biologidex.settings.production_local
      C_FORCE_ROOT: "1"  # Allow celery to run as root in container
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - biologidex-network
    healthcheck:
      test: ["CMD-SHELL", "celery -A biologidex inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.production
    restart: always
    command: celery -A biologidex beat -l info --schedule=/app/celerybeat-schedule
    volumes:
      - ./logs:/app/logs
      - celerybeat_schedule:/app
    environment:
      DJANGO_SETTINGS_MODULE: biologidex.settings.production_local
    env_file:
      - .env
    depends_on:
      celery_worker:
        condition: service_healthy
    networks:
      - biologidex-network

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"      # Public HTTP
      - "443:443"    # Public HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - static_files:/var/www/biologidex/static:ro
      - media_files:/var/www/biologidex/media:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    networks:
      - biologidex-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional: PgBouncer for connection pooling
  pgbouncer:
    image: edoburu/pgbouncer:latest
    restart: always
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-biologidex}
      DB_USER: ${DB_USER:-biologidex}
      DB_PASSWORD: ${DB_PASSWORD}
      DATABASES_HOST: db
      DATABASES_PORT: 5432
      DATABASES_DBNAME: ${DB_NAME:-biologidex}
      DATABASES_USER: ${DB_USER:-biologidex}
      DATABASES_PASSWORD: ${DB_PASSWORD}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
      RESERVE_POOL_SIZE: 5
      RESERVE_POOL_TIMEOUT: 3
      SERVER_IDLE_TIMEOUT: 600
    depends_on:
      db:
        condition: service_healthy
    networks:
      - biologidex-network
    ports:
      - "127.0.0.1:6432:6432"  # PgBouncer port

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local
  celerybeat_schedule:
    driver: local

networks:
  biologidex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16